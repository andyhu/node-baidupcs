const ERRORS = {
  1: { status: '500', message: 'Unknown error', explain: '未知错误', retryable: true },
  2: { status: '500', message: 'Service temporarily unavailable', explain: '服务暂不可用', retryable: true },
  6: { status: '403', message: 'No permission to access user data', explain: '无权访问用户数据', retryable: false },
  7: { status: '403', message: 'No permission to access data for this referer', explain: '无权访问数据', retryable: false },
  100: { status: '400', message: 'Invalid parameter', explain: '无效参数', retryable: false },
  101: { status: '401', message: 'Invalid API key', explain: '无效API Key', retryable: false },
  102: { status: '401', message: 'Session key invalid or no longer valid', explain: '会话密钥无效', retryable: false },
  103: { status: '401', message: 'Invalid/Used call_id parameter', explain: 'call_id参数无效/已被使用', retryable: false },
  104: { status: '400', message: 'Incorrect signature', explain: '签名错误', retryable: false },
  105: { status: '400', message: 'Too many parameters', explain: '参数过多', retryable: false },
  106: { status: '400', message: 'Unsupported signature method', explain: '不支持此签名方式', retryable: false },
  107: { status: '400', message: 'Invalid/Used timestamp parameter', explain: '时间戳无效', retryable: false },
  108: { status: '401', message: 'Invalid user id', explain: '用户ID无效', retryable: false },
  109: { status: '400', message: 'Invalid user info field', explain: '用户信息字段无效', retryable: false },
  110: { status: '401', message: 'Access token invalid or no longer valid', explain: 'Access token无效或已失效', retryable: false },
  111: { status: '401', message: 'Access token expired', explain: 'Access token已过期', retryable: false },
  112: { status: '401', message: 'Session key expired', explain: '会话密钥已过期', retryable: false },
  114: { status: '400', message: 'Invalid Ip', explain: '无效IP', retryable: false },
  31400: { status: '400', message: 'param error', explain: '参数错误', retryable: false },
  31401: { status: '400', message: 'malformed json', explain: 'JSON格式错误', retryable: false },
  31402: { status: '400', message: 'no "table" in request', explain: '请求中没有“table”字段', retryable: false },
  31403: { status: '400', message: 'no "records" in request', explain: '请求中没有“records”字段', retryable: false },
  31405: { status: '400', message: 'too many records in request', explain: '请求中的records 过多，目前限制为500', retryable: false },
  31406: { status: '400', message: 'bad columnname', explain: '列名非法，请参考API文档', retryable: false },
  31407: { status: '400', message: 'record too large', explain: 'record过大，> 1M', retryable: false },
  31408: { status: '400', message: 'bad table name', explain: 'table名称不合法', retryable: false },
  31409: { status: '400', message: 'table not exist', explain: 'table不存在，请先创建', retryable: false },
  31410: { status: '400', message: 'bad record', explain: 'record格式错误，请检查JSON', retryable: false },
  31411: { status: '400', message: 'no appid', explain: '请求中没有“app_id”字段', retryable: false },
  31412: { status: '400', message: 'no userid', explain: '请求中没有“user_id”字段', retryable: false },
  31420: { status: '400', message: 'bad condition', explain: 'condition描述错误。', retryable: false },
  31421: { status: '400', message: 'bad projection', explain: 'projection描述错误', retryable: false },
  31422: { status: '400', message: 'bad order_by', explain: 'order_by描述错误', retryable: false },
  31423: { status: '400', message: 'bad operator', explain: 'condition中的operation 非法', retryable: false },
  31424: { status: '400', message: 'bad start/limit', explain: 'start/limit 错误', retryable: false },
  31425: { status: '400', message: 'unsupported operator', explain: '操作符暂未支持，如：or、like、regex等', retryable: false },
  31430: { status: '400', message: 'no key in record', explain: 'update/delete 请求，但是record 中没有_key 字段', retryable: false },
  31431: { status: '400', message: 'record not exist', explain: '符合条件的record不存在，比如if-match不匹配、在回收站等', retryable: false },
  31432: { status: '400', message: 'unknown op', explain: '参数op非法', retryable: false },
  31433: { status: '400', message: 'bad key', explain: 'key非法', retryable: false },
  31440: { status: '400', message: 'param cursor not set', explain: '参数cursor未设值', retryable: false },
  31441: { status: '400', message: 'param cursor format error', explain: '参数cursor格式错误', retryable: false },
  31442: { status: '400', message: 'param cursor appid wrong', explain: '参数cursor appid错误', retryable: false },
  31443: { status: '400', message: 'param cursor user_id wrong', explain: '参数cursor user_id错误', retryable: false },
  31450: { status: '400', message: 'exceed quota', explain: '超出配额', retryable: false },
  31451: { status: '400', message: 'quota size param not exist', explain: '找不到参数quota size', retryable: false },
  31452: { status: '503', message: 'quota info fail', explain: 'quota info失败', retryable: true },
  31453: { status: '400', message: 'quota too big', explain: 'quota过大', retryable: false },
  31454: { status: '400', message: 'quota size param not numberic', explain: 'quota size 参数未数值化', retryable: false },
  31460: { status: '400', message: 'no permission', explain: '未授权', retryable: false },
  31461: { status: '400', message: 'account not login', explain: '账户为登录，使用bduss认证失败', retryable: false },
  31462: { status: '400', message: 'access token errro', explain: 'access token校验失败', retryable: false },
  31470: { status: '400', message: 'index num too much', explain: 'index num太多', retryable: false },
  31472: { status: '400', message: 'table already exist', explain: 'table已存在', retryable: false },
  31473: { status: '400', message: 'abnormal table already exist', explain: '异常table已存在', retryable: false },
  31474: { status: '400', message: 'table not drop, cannot restore', explain: 'table不在回收站，无法恢复', retryable: false },
  31475: { status: '400', message: 'engine not support', explain: '不支持此项操作', retryable: false },
  31480: { status: '400', message: 'param op wrong, should be recycled or permanent', explain: '参数op错误，应为可回收或永久的', retryable: false },
  31490: { status: '400', message: 'api not support', explain: '调用了错误的API', retryable: false },
  31500: { status: '500', message: 'Internal error (Try Again Later)', explain: '内部错误', retryable: true },
  31501: { status: '503', message: 'storeengine construct fail', explain: 'construct失败', retryable: true },
  31502: { status: '503', message: 'storeengine select fail', explain: '选择操作失败', retryable: true },
  31503: { status: '503', message: 'storeengine insert fail', explain: '插入操作失败', retryable: true },
  31504: { status: '503', message: 'storeengine update fail', explain: '更新操作失败', retryable: true },
  31505: { status: '503', message: 'storeengine delete fail', explain: '删除操作失败', retryable: true },
  31506: { status: '503', message: 'storeengine count fail', explain: 'count操作失败', retryable: true },
  31507: { status: '503', message: 'storeengine ensure index fail', explain: '查询或创建索引失败', retryable: true },
  31508: { status: '503', message: 'storeengine delete index fail', explain: '删除索引失败', retryable: true },
  31509: { status: '503', message: 'storeengine drop table fail', explain: '删除table操作失败', retryable: true },
  31530: { status: '503', message: 'config set num match fail', explain: '配置中num匹配失败', retryable: true },
  31590: { status: '503', message: 'db query error', explain: 'db交互出错', retryable: true },
  31591: { status: '503', message: 'network error', explain: '内部网络交互错误', retryable: true },
};

export const retryable = code => (ERRORS.hasOwnProperty(code) ? ERRORS[code].retryable : null);
export const explain = code => (ERRORS.hasOwnProperty(code) ? ERRORS[code].explain : null);
